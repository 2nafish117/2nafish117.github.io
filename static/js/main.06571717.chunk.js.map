{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","class","href","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,0GCoE5BC,MAhEf,WACE,OACE,6BACE,yBAAKC,MAAM,UACT,wBAAIA,MAAM,cACV,wBAAIA,MAAM,QACN,uBAAGC,KAAK,IAAID,MAAM,YAChB,yBAAKE,IAAI,2BACT,0BAAMF,MAAM,aAAZ,gBAIJ,wBAAIA,MAAM,YACR,uBAAGC,KAAK,IAAID,MAAM,YAChB,yBAAKE,IAAI,6BACT,0BAAMF,MAAM,aAAZ,aAGJ,wBAAIA,MAAM,YACR,uBAAGC,KAAK,IAAID,MAAM,YAClB,yBAAKE,IAAI,6BACT,0BAAMF,MAAM,aAAZ,aAGF,wBAAIA,MAAM,YACR,uBAAGC,KAAK,IAAID,MAAM,YAClB,yBAAKE,IAAI,6BACT,0BAAMF,MAAM,aAAZ,aAGF,wBAAIA,MAAM,YACR,uBAAGC,KAAK,IAAID,MAAM,YAClB,yBAAKE,IAAI,6BACT,0BAAMF,MAAM,aAAZ,aAGF,wBAAIA,MAAM,YACR,uBAAGC,KAAK,IAAID,MAAM,YAClB,yBAAKE,IAAI,6BACT,0BAAMF,MAAM,aAAZ,aAGF,wBAAIA,MAAM,YACR,uBAAGC,KAAK,IAAID,MAAM,YAClB,yBAAKE,IAAI,6BACT,0BAAMF,MAAM,aAAZ,eAMN,8BACE,kDACA,w3DC7CYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.06571717.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <nav class=\"navbar\">\n        <ul class=\"navbar-nav\">\n        <li class=\"logo\">\n            <a href=\"#\" class=\"nav-link\">\n              <img src=\"res/icons/chief-32.jpg\"></img>\n              <span class=\"link-text\">2nafish117</span>\n            </a>\n          </li>\n\n          <li class=\"nav-item\">\n            <a href=\"#\" class=\"nav-link\">\n              <img src=\"res/icons/discord-32.png\"></img>\n              <span class=\"link-text\">discord</span>\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a href=\"#\" class=\"nav-link\">\n            <img src=\"res/icons/discord-32.png\"></img>\n            <span class=\"link-text\">discord</span>\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a href=\"#\" class=\"nav-link\">\n            <img src=\"res/icons/discord-32.png\"></img>\n            <span class=\"link-text\">discord</span>\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a href=\"#\" class=\"nav-link\">\n            <img src=\"res/icons/discord-32.png\"></img>\n            <span class=\"link-text\">discord</span>\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a href=\"#\" class=\"nav-link\">\n            <img src=\"res/icons/discord-32.png\"></img>\n            <span class=\"link-text\">discord</span>\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a href=\"#\" class=\"nav-link\">\n            <img src=\"res/icons/discord-32.png\"></img>\n            <span class=\"link-text\">discord</span>\n            </a>\n          </li>\n        </ul>\n      </nav>\n\n      <main>\n        <h1>lorem ipsum header</h1>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Proin sagittis nisl rhoncus mattis. Netus et malesuada fames ac turpis. Tellus orci ac auctor augue mauris. Rutrum quisque non tellus orci ac auctor. Quisque non tellus orci ac auctor augue. Eu non diam phasellus vestibulum lorem sed risus. Vulputate eu scelerisque felis imperdiet proin fermentum leo vel. Aenean euismod elementum nisi quis eleifend quam adipiscing. Morbi blandit cursus risus at ultrices mi tempus imperdiet nulla. Viverra accumsan in nisl nisi scelerisque eu ultrices. Nam libero justo laoreet sit amet cursus sit. Donec massa sapien faucibus et molestie.\n\n        Mauris a diam maecenas sed. Eu non diam phasellus vestibulum lorem sed risus. Facilisi cras fermentum odio eu feugiat. Vulputate eu scelerisque felis imperdiet proin fermentum. Eget nunc scelerisque viverra mauris in aliquam. Adipiscing vitae proin sagittis nisl rhoncus. Et magnis dis parturient montes. Nibh sed pulvinar proin gravida hendrerit lectus. Pulvinar elementum integer enim neque volutpat ac tincidunt vitae semper. Aliquam ut porttitor leo a diam sollicitudin tempor. Adipiscing elit duis tristique sollicitudin nibh. Vehicula ipsum a arcu cursus vitae congue mauris rhoncus.\n\n        Enim nunc faucibus a pellentesque sit amet porttitor. Nisl nisi scelerisque eu ultrices vitae. Leo in vitae turpis massa sed elementum tempus. Lorem sed risus ultricies tristique nulla. Diam phasellus vestibulum lorem sed risus. Mus mauris vitae ultricies leo integer. Pellentesque dignissim enim sit amet venenatis urna cursus eget. Scelerisque purus semper eget duis at tellus at. Aliquam id diam maecenas ultricies mi eget mauris. Egestas quis ipsum suspendisse ultrices gravida dictum. Id leo in vitae turpis massa sed elementum tempus. Blandit massa enim nec dui nunc mattis enim ut.\n        </p>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}